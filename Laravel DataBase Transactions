Laravel Database Transactions
==============================
https://laravel.com/docs/5.8/database

Database Transactions
You may use the transaction method on the DB facade to run a set of operations within a database transaction. If an exception is thrown within the transaction Closure, the transaction will automatically be rolled back. If the Closure executes successfully, the transaction will automatically be committed. You don't need to worry about manually rolling back or committing while using the transaction method:

DB::transaction(function () {
    DB::table('users')->update(['votes' => 1]);

    DB::table('posts')->delete();
});
Handling Deadlocks
The transaction method accepts an optional second argument which defines the number of times a transaction should be reattempted when a deadlock occurs. Once these attempts have been exhausted, an exception will be thrown:

DB::transaction(function () {
    DB::table('users')->update(['votes' => 1]);

    DB::table('posts')->delete();
}, 5);
Manually Using Transactions
If you would like to begin a transaction manually and have complete control over rollbacks and commits, you may use the beginTransaction method on the DB facade:

DB::beginTransaction();
You can rollback the transaction via the rollBack method:

DB::rollBack();
Lastly, you can commit a transaction via the commit method:

DB::commit();



Eg:
Success
=======

DB::connection('dynamicdb')->beginTransaction();

try
{
  $editmaster = item_master::create([
                    'Name'    =>  'Book',
                    'Price'   =>  10,
                    'Barcode' =>  'A80004'
                ]);
   /* Not compulsary */
   DB::connection('dynamicdb')->commit();
                
}catch(\Exception)
{
    /* When error occure rollback entire db transactions */
    DB::connection('dynamicdb')->rollBack();
    return $this->error_response('Something Went wrong',$e);
}

eg 2 : 

DB::connection('dynamicdb')->beginTransaction();
$editmaster = item_master::create([
                    'Name'    =>  'Book',
                    'Price'   =>  10,
                    'Barcode' =>  'A80004'
                ]);
 DB::connection('dynamicdb')->commit();
 
 DB::connection('dynamicdb')->beginTransaction();
 $editmaster = item_master::create([
                    'Name'    =>  'Book',
                    'Price'   =>  10,
                    'Barcode' =>  'A80004'
                ]);
   DB::connection('dynamicdb')->rollBack();
   
/*   first transaction will saved and second transaction will rollbacked. */
